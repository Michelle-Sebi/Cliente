// Hacer una petición GET a una API
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => {
    // Verificar si la respuesta es OK (status 200-299)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    // Convertir la respuesta a JSON
    return response.json();
  })
  .then(data => {
    // Trabajar con los datos recibidos
    console.log('Datos recibidos:', data);
    document.getElementById('resultado').textContent = data.title;
  })
  .catch(error => {
    // Manejar cualquier error
    console.error('Error en la petición:', error);
    document.getElementById('resultado').textContent = 'Error al cargar los datos';
  });
  ------------------------------------------------------
  
  Ejemplo con POST (enviando datos)
  
  // Datos a enviar
const nuevoPost = {
  title: 'Mi nuevo post',
  body: 'Este es el contenido de mi post',
  userId: 1
};

// Configurar la petición POST
fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(nuevoPost)
})
  .then(response => response.json())
  .then(data => console.log('Respuesta:', data))
  .catch(error => console.error('Error:', error));
  
  --------------------------------------------------------
  
  Ejemplo con async/await
  
  async function obtenerDatos() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    console.log(data);
    return data;
  } catch (error) {
    console.error('Error al obtener datos:', error);
  }
}

// Llamar a la función
obtenerDatos();
Recuerda que fetch devuelve una promesa, por lo que necesitas usar .then() y .catch() o async/await para manejar la respuesta asíncrona.
